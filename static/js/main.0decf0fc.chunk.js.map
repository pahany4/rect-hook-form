{"version":3,"sources":["API/api.js","App2.js","reportWebVitals.js","index.js"],"names":["apiAddress","nameLocality","count","axios","baseURL","headers","get","App2","useState","open","setOpen","useForm","mode","register","handleSubmit","formState","errors","watch","submitCount","listCity","setListCity","citySelect","setCitySelect","name","age","email","disableButton","Object","keys","length","style","margin","width","Dialog","onClose","aria-labelledby","aria-describedby","padding","full_title","onSubmit","data","marginBottom","TextField","maxLength","required","id","label","variant","error","pattern","min","max","Autocomplete","disableListWrap","options","map","option","fullWidth","renderInput","params","onChange","e","city","then","response","ListCity","target","value","noOptionsText","event","console","log","updateCity","valueOf","innerText","Button","disabled","type","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAcaA,EAAW,SACLC,EAAaC,GACxB,OAZGC,SAAa,CACZC,QAAU,sBACVC,QAAS,CACL,eAAgB,mBAChB,OAAU,sBAQAC,IAAX,8BAAsCL,EAAtC,kBAA4DC,K,gBC4I5DK,MApJf,WACI,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KASA,EAKIC,YAAQ,CAACC,KAAM,aAJfC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aAFJ,IAGIC,UAAYC,EAHhB,EAGgBA,OACZC,GAJJ,EAGwBC,YAHxB,EAIID,OASJ,EAAgCT,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAoCZ,mBAAS,IAA7C,mBAAOa,EAAP,KAAmBC,EAAnB,KAoBMC,EAAON,EAAM,QACbO,EAAMP,EAAM,OACZQ,EAAQR,EAAM,SAIdS,GAHOT,EAAM,SAGIO,IAAQD,IAASE,GAASE,OAAOC,KAAKZ,GAAQa,OAAS,GAC9E,OACI,sBAAKC,MAAO,CAACC,OAAQ,OAAQC,MAAO,QAApC,UACI,cAACC,EAAA,EAAD,CACIxB,KAAMA,EACNyB,QAjDQ,WAChBxB,GAAQ,IAiDAyB,kBAAgB,qBAChBC,mBAAiB,2BAJrB,SAMI,sBAAKN,MAAO,CAACO,QAAS,IAAtB,UACI,8FACA,qDAASd,KACT,6EAAaC,KACb,wCAAWC,KACX,iEAAWJ,EAAWiB,mBAI9B,gEACA,uBAAMC,SAAUzB,GAnDP,SAAC0B,GACd9B,GAAQ,MAkDJ,UAEI,sBAAKoB,MAAO,CAACW,aAAc,IAA3B,UACI,cAACC,EAAA,EAAD,2BACQ7B,EAAS,OAAQ,CAAC8B,UAAW,MADrC,IAEIC,UAAQ,EACRC,GAAG,oBACHC,MAAM,qBACNC,QAAQ,cAEX/B,EAAOO,MAAQ,mIAGpB,sBAAKO,MAAO,CAACW,aAAc,IAA3B,UACI,cAACC,EAAA,EAAD,yBACIM,MAAOhC,EAAOQ,KACVX,EAAS,MAAO,CAChB+B,UAAU,EAAMK,QAAS,QAASC,IAAK,GAAIC,IAAK,MAHxD,IAMIN,GAAG,oBACHC,MAAM,6CACNC,QAAQ,cAEX/B,EAAOQ,KAAO,mEAGnB,sBAAKM,MAAO,CAACW,aAAc,IAA3B,UACI,cAACC,EAAA,EAAD,2BACQ7B,EAAS,QAAS,CAClB+B,UAAU,EACVK,QAAS,4HAHjB,IAKIL,UAAQ,EACRC,GAAG,oBACHC,MAAM,QACNC,QAAQ,cAEX/B,EAAOS,OAAS,iJAIrB,qBAAKK,MAAO,CAACW,aAAc,IAA3B,SACI,cAACW,EAAA,EAAD,CACIC,iBAAiB,EACjBR,GAAG,iBACHS,QAASnC,EAASoC,KAAI,SAACC,GAAD,OAAYA,EAAOlB,cACzCmB,WAAW,EACXC,YAAa,SAACC,GAAD,OAAY,cAACjB,EAAA,EAAD,uCAAeiB,GACA9C,EAAS,OAAQ,KADhC,IAKW+C,SAAU,SAACC,IA/FlD,SAACC,GACVA,EAAKjC,QAAU,GACf7B,EAA0B8D,EAAM,IAAIC,MAAK,SAAAC,GACrC5C,EAAY4C,EAASxB,SA6F2ByB,CAASJ,EAAEK,OAAOC,QAEnBrB,MAAM,iHACTC,QAAQ,eAC5CqB,cAAe,+FACfR,SAAU,SAACS,GACPC,QAAQC,IAAI,UA9FjB,SAACT,EAAM3C,GAClB2C,GAAQA,EAAKjC,QAAU,GACvB7B,EAA0B8D,EAAM,GAAGC,MAAK,SAAAC,GACpC1C,EAAc0C,EAASxB,KAAK,OA4FhBgC,CAAWH,EAAMH,OAAOO,UAAUC,gBAK9C,qBAAK5C,MAAO,CAACW,aAAc,IAA3B,SACI,cAACkC,EAAA,EAAD,CACIC,SAAUlD,EACVmD,KAAM,SACN9B,QAAQ,YAAY+B,MAAM,UAH9B,6ECpILC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0decf0fc.chunk.js","sourcesContent":["import * as axios from \"axios\";\n\n\nexport const template = () => {\n    return axios.create({\n            baseURL : 'https://api.ke22.ru',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            }\n        }\n    )\n}\n\nexport const apiAddress={\n    searchLocality(nameLocality,count){\n        return template().get(`/geo/locality/?term=${nameLocality}&count=${count}`)\n    },\n}","import {useForm} from 'react-hook-form';\nimport './App.css';\nimport {Button, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {useState} from \"react\";\nimport {apiAddress} from \"./API/api\";\nimport Dialog from '@material-ui/core/Dialog';\n\nfunction App2() {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /* Хук useForm */\n    const {\n        register,\n        handleSubmit,\n        formState: {errors, submitCount},\n        watch\n    } = useForm({mode: 'onChange'})\n\n    /* Функция для отправки данных на сервер */\n    const onSubmit = (data) => {\n        setOpen(true)\n    }\n\n    /* Локальный state для списка городов */\n    const [listCity, setListCity] = useState([])\n    const [citySelect, setCitySelect] = useState([])\n\n    /* Получение массива списка городов и запись его в локальный state */\n    const ListCity = (city) => {\n        if (city.length >= 1) {\n            apiAddress.searchLocality(city, 10).then(response => {\n                setListCity(response.data);\n            })\n        }\n    }\n\n    const updateCity = (city, listCity) => {\n        if (city && city.length >= 1) {\n            apiAddress.searchLocality(city, 1).then(response => {\n                setCitySelect(response.data[0]);\n            })\n        }\n    }\n\n    /* слежка за полями формы для валидации */\n    const name = watch('name');\n    const age = watch('age');\n    const email = watch('email');\n    const city = watch('city');\n\n    /* Условие, при котором кнопка отправки на сервер будет не активна */\n    const disableButton = !age || !name || !email || Object.keys(errors).length > 0\n    return (\n        <div style={{margin: 'auto', width: \"50vw\"}}>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <div style={{padding: 40}}>\n                    <h3>Отправлено</h3>\n                    <p>Имя: {name}</p>\n                    <p>Возраст: {age}</p>\n                    <p>Email: {email}</p>\n                    <p>Город: {citySelect.full_title}</p>\n                </div>\n\n            </Dialog>\n            <h1>Форма</h1>\n            <form onSubmit={handleSubmit(onSubmit)}>\n\n                <div style={{marginBottom: 30}}>\n                    <TextField\n                        {...register('name', {maxLength: 10})}\n                        required\n                        id=\"outlined-required\"\n                        label=\"Имя\"\n                        variant=\"outlined\"\n                    />\n                    {errors.name && <p>не более 10 символов</p>}\n                </div>\n\n                <div style={{marginBottom: 30}}>\n                    <TextField\n                        error={errors.age}\n                        {...register('age', {\n                            required: true, pattern: /\\d?\\d/, min: 10, max: 99\n                        })}\n\n                        id=\"outlined-required\"\n                        label=\"Возраст\"\n                        variant=\"outlined\"\n                    />\n                    {errors.age && <p>от 10 до 99</p>}\n                </div>\n\n                <div style={{marginBottom: 30}}>\n                    <TextField\n                        {...register('email', {\n                            required: true,\n                            pattern: /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n                        })}\n                        required\n                        id=\"outlined-required\"\n                        label=\"Email\"\n                        variant=\"outlined\"\n                    />\n                    {errors.email && <p>Введите корректный Email</p>}\n                </div>\n\n\n                <div style={{marginBottom: 30}}>\n                    <Autocomplete\n                        disableListWrap={true}\n                        id=\"combo-box-demo\"\n                        options={listCity.map((option) => option.full_title)}\n                        fullWidth={true}\n                        renderInput={(params) => <TextField {...params}\n                                                            {...register('city', {\n\n                                                            })}\n\n                                                            onChange={(e) => {\n                                                                ListCity(e.target.value)\n\n                                                            }} label=\"Город отправки груза\"\n                                                            variant=\"outlined\"/>}\n                        noOptionsText={'Нет такого города'}\n                        onChange={(event) => {\n                            console.log(\"change\")\n                            updateCity(event.target.valueOf().innerText, listCity)\n                        }}\n                    />\n                </div>\n\n                <div style={{marginBottom: 30}}>\n                    <Button\n                        disabled={disableButton}\n                        type={'submit'}\n                        variant=\"contained\" color=\"primary\">\n                        отправить\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default App2;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}